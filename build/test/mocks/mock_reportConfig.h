/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_REPORTCONFIG_H
#define _MOCK_REPORTCONFIG_H

#include "reportConfig.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_reportConfig_Init(void);
void mock_reportConfig_Destroy(void);
void mock_reportConfig_Verify(void);




#define configADCReport_IgnoreAndReturn(cmock_retval) configADCReport_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void configADCReport_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define configADCReport_ExpectAndReturn(paramsADCReport, cmock_retval) configADCReport_CMockExpectAndReturn(__LINE__, paramsADCReport, cmock_retval)
void configADCReport_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, paramsADCReport_t paramsADCReport, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_configADCReport_CALLBACK)(paramsADCReport_t paramsADCReport, int cmock_num_calls);
void configADCReport_StubWithCallback(CMOCK_configADCReport_CALLBACK Callback);
#define configADCReport_IgnoreArg_paramsADCReport() configADCReport_CMockIgnoreArg_paramsADCReport(__LINE__)
void configADCReport_CMockIgnoreArg_paramsADCReport(UNITY_LINE_TYPE cmock_line);
#define startADCReport_IgnoreAndReturn(cmock_retval) startADCReport_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void startADCReport_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define startADCReport_ExpectAndReturn(timerId, cmock_retval) startADCReport_CMockExpectAndReturn(__LINE__, timerId, cmock_retval)
void startADCReport_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t timerId, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_startADCReport_CALLBACK)(uint8_t timerId, int cmock_num_calls);
void startADCReport_StubWithCallback(CMOCK_startADCReport_CALLBACK Callback);
#define startADCReport_IgnoreArg_timerId() startADCReport_CMockIgnoreArg_timerId(__LINE__)
void startADCReport_CMockIgnoreArg_timerId(UNITY_LINE_TYPE cmock_line);
#define stopADCReport_IgnoreAndReturn(cmock_retval) stopADCReport_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void stopADCReport_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t cmock_to_return);
#define stopADCReport_ExpectAndReturn(timerId, cmock_retval) stopADCReport_CMockExpectAndReturn(__LINE__, timerId, cmock_retval)
void stopADCReport_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t timerId, uint8_t cmock_to_return);
typedef uint8_t (* CMOCK_stopADCReport_CALLBACK)(uint8_t timerId, int cmock_num_calls);
void stopADCReport_StubWithCallback(CMOCK_stopADCReport_CALLBACK Callback);
#define stopADCReport_IgnoreArg_timerId() stopADCReport_CMockIgnoreArg_timerId(__LINE__)
void stopADCReport_CMockIgnoreArg_timerId(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
